import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { useAuth } from "@/hooks/useAuth";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { toast } from "sonner";
import { format } from "date-fns";
import { vi } from "date-fns/locale";
import { ProfileForm } from "@/components/profile/ProfileForm";
import { BookingHistory } from "@/components/profile/BookingHistory";
import { api } from "@/lib/api";
import { Loader2 } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";

interface User {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address?: string;
  role: string;
}

interface Booking {
  id: number;
  bookingReference: string;
  checkIn: string;
  checkOut: string;
  status: string;
  totalPrice: number;
  room: {
    id: number;
    name: string;
    type: string;
  };
}

export default function Profile() {
  const { user, isLoading: isLoadingAuth } = useAuth();
  const [activeTab, setActiveTab] = useState("profile");

  const {
    data: userData,
    isLoading: isLoadingUser,
    error: userError,
    refetch: refetchUser,
  } = useQuery<User>({
    queryKey: ["user", user?.id],
    queryFn: async () => {
      try {
        const response = await api.get(`/api/users/${user?.id}`);
        return response.data;
      } catch (error: any) {
        if (error.response?.status === 403) {
          throw new Error("Bạn không có quyền xem thông tin này");
        }
        throw error;
      }
    },
    enabled: !!user?.id,
    retry: 1,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  const {
    data: bookings,
    isLoading: isLoadingBookings,
    error: bookingsError,
    refetch: refetchBookings,
  } = useQuery<Booking[]>({
    queryKey: ["bookings", user?.id],
    queryFn: async () => {
      try {
        const response = await api.get(`/api/bookings/user/${user?.id}`);
        return response.data;
      } catch (error: any) {
        if (error.response?.status === 403) {
          throw new Error("Bạn không có quyền xem lịch sử đặt phòng");
        }
        throw error;
      }
    },
    enabled: !!user?.id && activeTab === "bookings",
    retry: 1,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  if (isLoadingAuth) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (!user) {
    return (
      <div className="container mx-auto py-10">
        <Card>
          <CardHeader>
            <CardTitle>Vui lòng đăng nhập</CardTitle>
            <CardDescription>
              Bạn cần đăng nhập để xem thông tin cá nhân
            </CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }

  const renderError = (error: Error, refetch: () => void) => (
    <Alert variant="destructive" className="mb-4">
      <AlertCircle className="h-4 w-4" />
      <AlertTitle>Lỗi</AlertTitle>
      <AlertDescription className="flex justify-between items-center">
        <span>{error.message}</span>
        <Button variant="outline" size="sm" onClick={() => refetch()}>
          Thử lại
        </Button>
      </AlertDescription>
    </Alert>
  );

  return (
    <div className="container mx-auto py-10">
      <Card>
        <CardHeader>
          <CardTitle>Thông tin cá nhân</CardTitle>
          <CardDescription>
            Quản lý thông tin cá nhân và lịch sử đặt phòng của bạn
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="profile">Thông tin cá nhân</TabsTrigger>
              <TabsTrigger value="bookings">Lịch sử đặt phòng</TabsTrigger>
            </TabsList>
            <TabsContent value="profile">
              {userError ? (
                renderError(userError as Error, refetchUser)
              ) : isLoadingUser ? (
                <div className="space-y-4">
                  <Skeleton className="h-4 w-[250px]" />
                  <Skeleton className="h-4 w-[200px]" />
                  <Skeleton className="h-4 w-[300px]" />
                </div>
              ) : (
                <ProfileForm user={userData} />
              )}
            </TabsContent>
            <TabsContent value="bookings">
              {bookingsError ? (
                renderError(bookingsError as Error, refetchBookings)
              ) : isLoadingBookings ? (
                <div className="space-y-4">
                  <Skeleton className="h-20 w-full" />
                  <Skeleton className="h-20 w-full" />
                  <Skeleton className="h-20 w-full" />
                </div>
              ) : (
                <BookingHistory bookings={bookings || []} />
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
} 